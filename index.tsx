import React from 'react'
import { View as RNView, ViewStyle, ViewProps, StyleProp } from 'react-native'

interface Props extends ViewStyle, ViewProps {
  children: React.ReactNode
  style?: StyleProp<ViewStyle>
}

function clean (obj) {
  for (let propName in obj) {
    if (obj[propName] == null) {
      delete obj[propName]
    }
  }
  return obj
}

const View: React.FC<Props> = ({ style, children, ...props }: Props) => {
  const {
    accessible,
    accessibilityLabel,
    accessibilityRole,
    accessibilityHint,
    collapsable,
    needsOffscreenAlphaCompositing,
    renderToHardwareTextureAndroid,
    accessibilityViewIsModal,
    accessibilityActions,
    onAccessibilityAction,
    shouldRasterizeIOS,
    onStartShouldSetResponder,
    onMoveShouldSetResponder,
    onResponderEnd,
    onResponderGrant,
    onResponderReject,
    onResponderMove,
    onResponderRelease,
    onResponderStart,
    onResponderTerminationRequest,
    onResponderTerminate,
    onStartShouldSetResponderCapture,
    onMoveShouldSetResponderCapture,
    onTouchStart,
    onTouchMove,
    onTouchEnd,
    onTouchCancel,
    onTouchEndCapture,
    accessibilityElementsHidden,
    accessibilityLabelledBy,
    accessibilityIgnoresInvertColors,
    accessibilityLanguage,
    accessibilityLargeContentTitle,
    accessibilityLiveRegion,
    accessibilityRespondsToUserInteraction,
    accessibilityShowsLargeContentViewer,
    accessibilityState,
    accessibilityValue,
    importantForAccessibility,
    collapsableChildren,
    focusable,
    hitSlop,
    id,
    nativeID,
    isTVSelectable,
    onAccessibilityEscape,
    onBlur,
    onAccessibilityTap,
    onFocus,
    onLayout,
    onMagicTap,
    onPointerCancel,
    onPointerCancelCapture,
    onPointerDown,
    onPointerEnter,
    onPointerDownCapture,
    onPointerEnterCapture,
    onPointerLeave,
    onPointerLeaveCapture,
    onPointerMove,
    onPointerMoveCapture,
    onPointerUp,
    pointerEvents,
    onPointerUpCapture,
    removeClippedSubviews,
    role,
    tabIndex,
    screenReaderFocusable,
    testID,
    tvParallaxMagnification,
    tvParallaxShiftDistanceX,
    tvParallaxTiltAngle,
    tvParallaxShiftDistanceY,
    ...styleProps
  } = props
  const viewProps = {
    accessible,
    accessibilityLabel,
    accessibilityRole,
    accessibilityHint,
    collapsable,
    needsOffscreenAlphaCompositing,
    renderToHardwareTextureAndroid,
    accessibilityViewIsModal,
    accessibilityActions,
    onAccessibilityAction,
    shouldRasterizeIOS,
    onStartShouldSetResponder,
    onMoveShouldSetResponder,
    onResponderEnd,
    onResponderGrant,
    onResponderReject,
    onResponderMove,
    onResponderRelease,
    onResponderStart,
    onResponderTerminationRequest,
    onResponderTerminate,
    onStartShouldSetResponderCapture,
    onMoveShouldSetResponderCapture,
    onTouchStart,
    onTouchMove,
    onTouchEnd,
    onTouchCancel,
    onTouchEndCapture,
    accessibilityElementsHidden,
    accessibilityLabelledBy,
    accessibilityIgnoresInvertColors,
    accessibilityLanguage,
    accessibilityLargeContentTitle,
    accessibilityLiveRegion,
    accessibilityRespondsToUserInteraction,
    accessibilityShowsLargeContentViewer,
    accessibilityState,
    accessibilityValue,
    importantForAccessibility,
    collapsableChildren,
    focusable,
    hitSlop,
    id,
    nativeID,
    isTVSelectable,
    onAccessibilityEscape,
    onBlur,
    onAccessibilityTap,
    onFocus,
    onLayout,
    onMagicTap,
    onPointerCancel,
    onPointerCancelCapture,
    onPointerDown,
    onPointerEnter,
    onPointerDownCapture,
    onPointerEnterCapture,
    onPointerLeave,
    onPointerLeaveCapture,
    onPointerMove,
    onPointerMoveCapture,
    onPointerUp,
    pointerEvents,
    onPointerUpCapture,
    removeClippedSubviews,
    role,
    tabIndex,
    screenReaderFocusable,
    testID,
    tvParallaxMagnification,
    tvParallaxShiftDistanceX,
    tvParallaxTiltAngle,
    tvParallaxShiftDistanceY
  }
  const passedStyle = clean(styleProps)
  const paneProps = clean(viewProps)
 
  return (
    <RNView style={[passedStyle, style]} {...paneProps}>
      {children}
    </RNView>
  )
}

export default View
